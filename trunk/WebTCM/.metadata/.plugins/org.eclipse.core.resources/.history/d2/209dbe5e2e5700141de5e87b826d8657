package site.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import site.vo.Duvida;
import site.vo.Exame;
import site.vo.Paciente;

public class DuvidaDao extends Dao{
	public Paciente getPaciente(int idPaciente)
	{
		Connection conn = null;
		
		try
		{
			conn = getConnection();

			String sql = "SELECT a.id_paciente, a.cod_verif, a.nome_paciente, a.rg_paciente, a.cpf_paciente, a.datanasc_paciente, a.endereco_rua, a.endereco_num, a.endereco_bairro, a.cep, a.telefone_paciente, a.email_paciente, a.convenio_paciente, n.id_exame, n.descricao FROM paciente a INNER JOIN exame n ON a.id_paciente = n.id_paciente WHERE a.id_paciente = ?";        

			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(1, idPaciente);
			ResultSet result = stmt.executeQuery();

			if (result.next())
			{
				Paciente paciente = new Paciente();
				paciente.setId(result.getInt("id_paciente"));
				paciente.setCod_verif(result.getInt("cod_verif"));
				paciente.setNome_paciente(result.getString("nome_paciente"));
				paciente.setRg_paciente(result.getString("rg_paciente"));
				paciente.setCpf_paciente(result.getString("cpf_paciente"));
				paciente.setDatanasc_paciente(result.getString("datanasc_paciente"));
				paciente.setEndereco_rua(result.getString("endereco_rua"));
				paciente.setEndereco_num(result.getInt("endereco_num"));
				paciente.setEndereco_bairro(result.getString("endereco_bairro"));
				paciente.setCep(result.getString("cep"));
				paciente.setTelefone_paciente(result.getString("telefone_paciente"));
				paciente.setEmail_paciente(result.getString("email_paciente"));
				paciente.setConvenio_paciente(result.getString("convenio_paciente"));

				Exame exame = new Exame();
				exame.setId(result.getInt("id_exame"));
				exame.setDescricao(result.getString("descricao"));
				paciente.setExame(exame);

				return paciente;
			}
			else
			{
				return null;
			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			return null;
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch(Exception closeEx)
				{
					//do nothing
				}
			}
		}
	}
	
	public List<Paciente> getPacientes()
	{
		Connection conn = null;
		List<Paciente> pacientes = new ArrayList<Paciente>();

		try
		{
			conn = getConnection();

			String sql = "SELECT a.id_paciente, a.cod_verif, a.nome_paciente, a.rg_paciente, a.cpf_paciente, a.datanasc_paciente, a.endereco_rua, a.endereco_num, a.endereco_bairro, a.cep, a.telefone_paciente, a.email_paciente, a.convenio_paciente, n.id_exame, n.descricao FROM paciente a INNER JOIN exame n ON a.id_paciente = n.id_paciente";        

			PreparedStatement stmt = conn.prepareStatement(sql);      
			ResultSet result = stmt.executeQuery();

			while (result.next())
			{
				Paciente paciente = new Paciente();
				paciente.setId(result.getInt("id_paciente"));
				paciente.setCod_verif(result.getInt("cod_verif"));
				paciente.setNome_paciente(result.getString("nome_paciente"));
				paciente.setRg_paciente(result.getString("rg_paciente"));
				paciente.setCpf_paciente(result.getString("cpf_paciente"));
				paciente.setDatanasc_paciente(result.getString("datanasc_paciente"));
				paciente.setEndereco_rua(result.getString("endereco_rua"));
				paciente.setEndereco_num(result.getInt("endereco_num"));
				paciente.setEndereco_bairro(result.getString("endereco_bairro"));
				paciente.setCep(result.getString("cep"));
				paciente.setTelefone_paciente(result.getString("telefone_paciente"));
				paciente.setEmail_paciente(result.getString("email_paciente"));
				paciente.setConvenio_paciente(result.getString("convenio_paciente"));

				Exame exame = new Exame();
				exame.setId(result.getInt("id_exame"));
				exame.setDescricao(result.getString("descricao"));
				paciente.setExame(exame);

				pacientes.add(paciente);
			}

			return pacientes;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			return null;
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch(Exception closeEx)
				{
					//do nothing
				}
			}
		}
	}
}
